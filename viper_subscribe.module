<?php

/**
 * @file
 * Holds hook implementation for the Message Subscribe Example module.
 */

use Drupal\Core\Entity\ContentEntityBase;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\node\Entity\Node;
use Drupal\comment\Entity\Comment;
use Drupal\user\Entity\User;
use Drupal\taxonomy\Entity\Term;
use Drupal\message\Entity\Message;
use Drupal\message\MessageInterface;
use Drupal\message_subscribe\Subscribers\DeliveryCandidate;

/**
 * Implements hook_views_pre_render()
 */
function viper_subscribe_views_pre_render(\Drupal\views\ViewExecutable $view) {
  //add our taxonomy term name hack to the profile page subscription view for term names
  if ($view->id() == "subscribe_taxonomy_term") {
    foreach ($view->result as $row) {
      $taxon = $row->_entity;
      $computed_settings[$taxon->id()] = $taxon->getName();
    }
    $view->element['#attached']['library'][] = 'viper_subscribe/termnames';
    $view->element['#attached']['drupalSettings']['viper_subscribe']['termnames'] = $computed_settings;
  }
  //add a similar solution to the profile page subscription view for content types because it's busted
  if ($view->id() == "subscribe_node") {
    $request = \Drupal::request()->getRequestUri();
    $arr = explode('/', $request);
    $uri = end($arr);
    if ($uri == 'message-subscribe') {
      $view->element['#attached']['library'][] = 'viper_subscribe/contenttypes';
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_view() for node entities.
 */
function viper_subscribe_node_view_alter(array &$build, EntityInterface $node, EntityViewDisplayInterface $display) {
  //if it's a teaser, make sure we don't get flag links
  //also skip basic pages
  if ($build['#view_mode'] == 'teaser' || $node->type->entity->label() == 'Page') {
    unset($build['flag_subscribe_content_type']);
    unset($build['flag_subscribe_node']);
  }
  //otherwise, add some extra flag links and our js
  else {
    //this hook is adding all of our taxonomy and author flag links to the nodes themselves, and adding a JS hack for flag link "tokens"
    $n = Node::load($node->id());
    //add taxonomy flag links to nodes where they are relevant
    $tags = [];
    $terms = [];
    if ($n->hasField('taxonomy_vocabulary_5') && $n->taxonomy_vocabulary_5) {
      $terms = array_merge($terms, $n->taxonomy_vocabulary_5->referencedEntities());
    }
    if ($n->hasField('taxonomy_vocabulary_3') && $n->taxonomy_vocabulary_3) {
      $terms = array_merge($terms, $n->taxonomy_vocabulary_3->referencedEntities());
    }
    if ($n->hasField('field_fellows_cohort') && $n->field_fellows_cohort) {
      $terms = array_merge($terms, $n->field_fellows_cohort->referencedEntities());
    }
    if ($n->hasField('taxonomy_forums') && $n->taxonomy_forums) {
      $terms = array_merge($terms, $n->taxonomy_forums->referencedEntities());
    }
    if ($terms) {
      //get the taxonomies from the node we're building
      $computed_settings = [];
      foreach ($terms as $taxon) {
        //for each taxonomy add a flag link
        $field = 'subscribe_taxonomy_' . $taxon->id();
        $build[$field] = [
          '#lazy_builder' => ['flag.link_builder:build',
            [
              $taxon->getEntityTypeId(),
              $taxon->id(),
              'subscribe_term',
            ],
          ],
          '#create_placeholder' => TRUE,
          '#weight' => 10,
        ];
        //add this id to our JS so we can go mangle the link title later this is a hack because tokens aren't working for flag links
        $computed_settings[$taxon->id()] = $taxon->getName();
      }
      $build['#attached']['library'][] = 'viper_subscribe/termnames';
      $build['#attached']['drupalSettings']['viper_subscribe']['termnames'] = $computed_settings;
    }

    //add author flag link to node

    //get the author
    $author = $n->get('uid')->entity;
    //build the link
    $build['subscribe_author'] = [
      '#lazy_builder' => ['flag.link_builder:build',
        [
          $author->getEntityTypeId(),
          $author->id(),
          'subscribe_user',
        ],
      ],
      '#create_placeholder' => TRUE,
      '#weight' => 10,
    ];
  }

}

/**
 * Implements hook_message_subscribe_get_subscribers_alter().
 *
 * Alter the subscribers list.
 *
 * @param \Drupal\message_subscribe\Subscribers\DeliveryCandidateInterface[] &$uids
 *   The array of delivery candidates as defined by
 *   `hook_message_subscribe_get_subscribers()`.
 * @param array $values
 *   A keyed array of values containing:
 *   - 'context' - The context array.
 *   - 'entity_type' - The entity type ID.
 *   - 'entity' - The entity object
 *   - 'subscribe_options' - The subscribe options array.
 */
function viper_subscribe_message_subscribe_get_subscribers_alter(array &$uids, array $values) {

  // Update each subscriber to use the only available delivery method, email.
  // This code could be adjusted later if other delivery methods are added.
  // For instance, you could add a field to the user to allow each user to
  // set their own preferred notification method, then implement it here.
  // Alternatively, enable the message_subscription_email module and skip this
  // line. That module will create a second 'email' flag on each piece of
  // content and then require users to select both 'subscribe' and 'email' if
  // they want to be notified by email. But if we want everyone to be notified
  // by email skipping that module and doing it this way is simpler all around.
  $digest_mode = \Drupal::config('viper_subscribe.settings')->get('viper_subscribe.digest_mode');
  $digest_interval = \Drupal::config('viper_subscribe.settings')->get('viper_subscribe.digest_interval');
  if ($digest_mode && $digest_interval) {
    foreach ($uids as $uid => $delivery_candidate) {
      $delivery_candidate->addNotifier($digest_interval);
    }
  }
  else {
    foreach ($uids as $uid => $delivery_candidate) {
      $delivery_candidate->addNotifier('email');
    }
  }
/*
  // Add administrators to every subscription list. Doing it this way
  // means they won't be able to unsubscribe, so use this judiciously.
  // Perhaps create a special role for users who should always be subscribed
  // to everything so that role can be removed for those who don't want this.
  // There are other ways to solve this problem. You could automatically flag
  // them to all new content in hook_ENTITY_TYPE_insert(), or send messages to
  // a custom list (see hook_user_insert() below). This is just an
  // illustration of another solution.
  $query = \Drupal::entityQuery('user')
  ->condition('status', 1);
  $query->condition('roles', 'administrators');
  $admin_uids = $query->execute();
  foreach ($admin_uids as $uid) {
    $uids[$uid] = new DeliveryCandidate([], ['email'], $uid);
  }

  return $uids;
  */
  //If this is a node, we need to alter our subscriber list with content type subs. Taxon, author, and Node subs are covered
  $node = $values['entity'];
  if ($values['entity_type'] == 'node' && $node->bundle()) {
    //Get users subscribed to Content type
    //(Users subscribed to any content that shares a content type with this one, with the content type flag)
    $query = \Drupal::database()
      ->select('flagging', 'f')
      ->fields('f', ['uid'])
      ->condition('f.flag_id', 'subscribe_content_type')
      ->condition('f.entity_type', 'node');
    $query->join('node', 'n', "f.entity_id = n.nid AND n.type = '" . $node->bundle() . "'");

    $result = $query->execute()
      ->fetchAll();

    //Add them to subscribers
    $ctsubs = [];
    foreach ($result as $row) {
      $ctsubs[] = \Drupal\user\Entity\User::load($row->uid);
    }
    $uids = array_merge($uids, $ctsubs);

  }
  //If this is a comment, we don't actually want to send notices to taxonomy or author subscribers
  if ($values['entity_type'] == 'comment' || $values['subscribe_options']['action'] == 'update') {
    //we want first context value without knowing what the id is yet... this array looks like "nid => nid"
    $nid = reset($values['context']['node']);
    //sanity check we do need a node
    if ($nid) {
      $node = \Drupal::entityTypeManager()->getStorage('node')->load($nid);
      //sanity check
      if ($node) {
        //get author subs
        $query = \Drupal::database()
          ->select('flagging', 'f')
          ->fields('f', ['uid'])
          ->condition('f.flag_id', 'subscribe_user')
          ->condition('f.entity_type', 'user')
          ->condition('f.entity_id', $node->getOwner()->id());
        $result = $query->execute()
          ->fetchAll();
        //subtract author subs from subscriber list when we are updating
        $authsubs = [];
        foreach ($result as $row) {
          //$authsubs[$row->uid] = \Drupal\user\Entity\User::load($row->uid);
          $authsubs[$row->uid] = $row->uid;
        }
        //subtract the subscribers we found (taxonomy) so we don't notify them on update
        $uids = array_diff_key($uids, $authsubs);

        //get taxonomy subs
        $terms = [];
        if ($node->hasField('taxonomy_vocabulary_5') && $node->taxonomy_vocabulary_5) {
          $terms = array_merge($terms, $node->taxonomy_vocabulary_5->referencedEntities());
        }
        if ($node->hasField('taxonomy_vocabulary_3') && $node->taxonomy_vocabulary_3) {
          $terms = array_merge($terms, $node->taxonomy_vocabulary_3->referencedEntities());
        }
        if ($node->hasField('field_fellows_cohort') && $node->field_fellows_cohort) {
          $terms = array_merge($terms, $node->field_fellows_cohort->referencedEntities());
        }
        if ($node->hasField('taxonomy_forums') && $node->taxonomy_forums) {
          $terms = array_merge($terms, $node->taxonomy_forums->referencedEntities());
        }

        if ($terms) {

          $termIds = [];
          foreach ($terms as $term) {
            $termIds[] = $term->id();
          }
          //there may not be any tags
          if (count($termIds) > 0) {
            $query = \Drupal::database()
              ->select('flagging', 'f')
              ->fields('f', ['uid'])
              ->condition('f.flag_id', 'subscribe_term')
              ->condition('f.entity_type', 'taxonomy_term')
              ->condition('f.entity_id', $termIds, 'IN');
            $result = $query->execute()
              ->fetchAll();
            $taxonsubs = [];
            foreach ($result as $row) {
              //$taxonsubs[$row->uid] = \Drupal\user\Entity\User::load($row->uid);
              $taxonsubs[$row->uid] = $row->uid;
            }
            //subtract the subscribers we found (taxonomy) so we don't notify them on update
            $uids = array_diff_key($uids, $taxonsubs);
          }
        }
      }
    }

  }

  return $uids;
}

/**
 * Implements hook_node_insert().
 */
function viper_subscribe_node_insert(Node $node) {
  $subscribers = \Drupal::service('message_subscribe.subscribers');

  // Add a message for the node author.
  $template = $node->isPublished() ? 'publish_node' : 'create_node';
  $message = Message::create(['template' => $template, 'uid' => $node->getOwnerId()]);
  $message->set('field_node_reference', $node);
  $message->set('field_published', $node->isPublished());
  $message->save();

  //get our config for autosubscribe and apply it
  $autosubscribe = \Drupal::config('viper_subscribe.settings')->get('viper_subscribe.autosubscribe');
  if ($autosubscribe) {

    //autosub COULD be for just some bundles like this
    //if (in_array($node->bundle(), ['article'])) {
    // Find all active users.
    $query = \Drupal::entityQuery('user')
      ->condition('status', 1);
    $uids = $query->execute();
    $users = User::loadMultiple($uids);

    // Add a content subscription flag for each user.
    // If there are a lot of users this should probably be queued, which would
    // require more custom code. For this example we'll assume the list is
    // a manageable size.
    $flag_service = \Drupal::service('flag');
    foreach ($users as $account) {
      $flag_id = 'subscribe_node';
      $flag = $flag_service->getFlagById($flag_id);
      // Check if already flagged to avoid exception error.
      $flagging = $flag_service->getFlagging($flag, $node, $account);
      if (!$flagging) {
        $flag_service->flag($flag, $node, $account);
      }
    }
    //end optional bundle filtering
    //}
  }
  // Do nothing more for unpublished nodes.
  if (!$node->isPublished()) {
    return;
  }
  // Queue messages to notify all the node subscribers about published node.
  $subscribers->sendMessage($node, $message);

}

/**
 * Implements hook_node_update().
 */
function viper_subscribe_node_update(Node $node) {
  //$notifier = \Drupal::service('message_notify.sender');
  $subscribers = \Drupal::service('message_subscribe.subscribers');

  // Match publication status of message to status of source entity.
  viper_subscribe_update_message_status($node);

  // Create a message for the node author.
  // See if this is a newly-published node.
  if ($node->isPublished() && !empty($node->original) && !$node->original->isPublished()) {
    $template = 'publish_node';
  }
  else {
    $template = 'update_node';
  }
  $message = Message::create([
    'template' => $template,
    'uid' => $node->getOwnerId(),
  ]);
  $message->set('field_node_reference', $node);
  $message->set('field_published', $node->isPublished());
  //$message->save();

  // Immediately notify message creator (node author) about update.
  // This is probably most interesting if someone else made updated or
  // published it.
  //$notifier->send($message, [], 'email');

  // Do nothing more for unpublished node.
  if (!$node->isPublished()) {
    return;
  }

  // Queue messages to the regular node subscribers about changes in published
  // nodes.
  //notify our hook that the action is an update action
  $subscribers->sendMessage($node, $message, [], ['action' => 'update']);

}

/**
 * Implements hook_comment_insert().
 */
function viper_subscribe_comment_insert(Comment $comment) {
  //$notifier = \Drupal::service('message_notify.sender');
  $subscribers = \Drupal::service('message_subscribe.subscribers');

  // Create a message for the node author.
  $node = $comment->get('entity_id')->first()->get('entity')->getTarget()->getValue();
  $message = Message::create(['template' => 'create_comment', 'uid' => $node->getOwnerId()]);
  $message->set('field_comment_reference', $comment);
  $message->set('field_published', $comment->isPublished());
  $message->save();

  // Immediately notify message creator (node author) about new comment.
  //$notifier->send($message, [], 'email');

  // Queue messages to notify all the node subscribers about new comment.

  //notify our hook that the action is an update action
  $subscribers->sendMessage($comment, $message, [], ['action' => 'update']);

}

/**
 * Set message entity published field when it changes in the related entity.
 *
 * @param \Drupal\Core\Entity\ContentEntityBase $entity
 *   The entity object.
 */
function viper_subscribe_update_message_status(ContentEntityBase $entity) {

  if (!empty($entity->original) && $entity->isPublished() == $entity->original->isPublished()) {
    return;
  }
  $query = \Drupal::entityQuery('message');
  $field = 'field_' . $entity->getEntityType()->id() . '_reference';
  $query->condition($field . '.target_id', $entity->id());

  $results = $query->execute();
  if (empty($results)) {
    return;
  }
  $messages = Message::loadMultiple($results);
  foreach ($messages as $message) {
    $message->set('field_published', $entity->isPublished());
    $message->save();
  }
}
